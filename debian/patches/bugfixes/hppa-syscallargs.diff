Description: Always load registers for arg4 and arg5 syscall arguments
 > Maybe other 5/6-argument syscalls also need reviewâ€¦
 .
 Yes, and basically I think it's stupid to try to distinguish syscalls
 with 1-4 arguments from those which use 5 or 6 arguments.
 With every added syscall someone needs to check again.
 .
 The patch below takes a much easier way. It simply pre-loads
 the registers for the 5th and 6th arguement on every syscall,
 independend if the syscalls has more than 4 arguments.
 That way we don't need to distinguish and it will always work.
 The downside is some small overhead for every syscall, but I
 think this is neglectable.
Author: Helge Deller <deller@gmx.de>
Bug-Debian: https://bugs.debian.org/1030998
Forwarded: no

--- a/parisc/__getsockopt.S
+++ b/parisc/__getsockopt.S
@@ -1,3 +1,3 @@
 #include "syscalls.h"
 
-syscall5_weak(getsockopt, getsockopt, __libc_getsockopt);
+syscall_weak(getsockopt, getsockopt, __libc_getsockopt);
--- a/parisc/__sendto.S
+++ b/parisc/__sendto.S
@@ -1,3 +1,3 @@
 #include "syscalls.h"
 
-syscall6_weak(sendto, sendto, __libc_sendto);
+syscall_weak(sendto, sendto, __libc_sendto);
--- a/parisc/__setsockopt.S
+++ b/parisc/__setsockopt.S
@@ -1,3 +1,3 @@
 #include "syscalls.h"
 
-syscall5_weak(setsockopt, setsockopt, __libc_setsockopt);
+syscall_weak(setsockopt, setsockopt, __libc_setsockopt);
--- a/parisc/_llseek.S
+++ b/parisc/_llseek.S
@@ -1,3 +1,3 @@
 #include "syscalls.h"
 
-syscall5(llseek, llseek);
+syscall(llseek, llseek);
--- a/parisc/mmap.S
+++ b/parisc/mmap.S
@@ -1,3 +1,3 @@
 #include "syscalls.h"
 
-syscall6(mmap, mmap);
+syscall(mmap, mmap);
--- a/parisc/mmap2.S
+++ b/parisc/mmap2.S
@@ -1,6 +1,6 @@
 #include "syscalls.h"
 
 #ifdef __NR_mmap2
-syscall6(mmap2,__mmap2)
+syscall(mmap2,__mmap2)
 #endif
 
--- a/parisc/mount.S
+++ b/parisc/mount.S
@@ -1,3 +1,3 @@
 #include "syscalls.h"
 
-syscall5(mount, mount);
+syscall(mount, mount);
--- a/parisc/parisc_fadvise.S
+++ b/parisc/parisc_fadvise.S
@@ -1,5 +1,5 @@
 #include "syscalls.h"
 
 #ifdef __NR_parisc_fadvise64_64
-syscall6(parisc_fadvise64_64, __parisc_fadvise64_64);
+syscall(parisc_fadvise64_64, __parisc_fadvise64_64);
 #endif
--- a/parisc/recvfrom.S
+++ b/parisc/recvfrom.S
@@ -1,3 +1,3 @@
 #include "syscalls.h"
 
-syscall6(recvfrom, recvfrom);
+syscall(recvfrom, recvfrom);
--- a/parisc/select.S
+++ b/parisc/select.S
@@ -1,3 +1,3 @@
 #include "syscalls.h"
 
-syscall5(select, select);
+syscall(select, select);
--- a/parisc/unified.S
+++ b/parisc/unified.S
@@ -21,14 +21,6 @@
 .global __unified_syscall
 .type __unified_syscall,@function
 
-.export __unified_syscall5
-.global __unified_syscall5
-.type __unified_syscall5,@function
-
-.export __unified_syscall6
-.global __unified_syscall6
-.type __unified_syscall6,@function
-
 .export __error_unified_syscall
 .global __error_unified_syscall
 
@@ -38,16 +30,32 @@
 _exit:
 exit:
         ldi 1, %r20
-	b __unified_syscall
-	nop
+	/* fall through */
 
-__unified_syscall6:
-	ldw -0x38(%sp), %r21
-__unified_syscall5:
-	ldw -0x34(%sp), %r22
 __unified_syscall:
+#ifndef __LP64__
+	/* 32bit: arg4 and arg5 are stored on stack */
+	stw %rp,-0x14(%sp)
+	ldo 0x40(%sp),%sp
+
+	/* save %r21 and %r22 on new stack */
+	stw %r21, -0x38(%sp)
+	stw %r22, -0x34(%sp)
+
+	/* get %r21 and %r22 from stack and do syscall */
+	ldw -0x38-0x40(%sp), %r21
+	be,l 0x100(%sr2, %r0), %sr0, %r31
+	ldw -0x34-0x40(%sp), %r22
+
+	/* restore original %r21 and %r22 */
+	stw %r21, -0x38(%sp)
+	stw %r22, -0x34(%sp)
+	ldo -0x40(%sp),%sp
+#else
+	/* 64bit: no need to get arg4 and arg5 from stack */
 	be,l 0x100(%sr2, %r0), %sr0, %r31
 	nop
+#endif
 	ldi -0x100, %r1
 	cmpb,>>=,n %r1, %ret0, .Lnoerr
 	sub %r0, %ret0, %ret0
